trials<-10000
eachCount<-rep(0, totalN)
for tr in range(1,trials)
{
for(ele in orderList)
{
countEach<-0
p<-1-pexp(2, rate=ele)
countEach <- rbinom(n=1, size=1, prob=p)
eachCount[ele]<-eachCount[ele]+countEach
print(tr)
}
}
orderList<-sample.int(totalN, totalN, replace = TRUE)
trials<-10000
eachCount<-rep(0, totalN)
for (tr in range(1,trials))
{
for(ele in orderList)
{
countEach<-0
p<-1-pexp(2, rate=ele)
countEach <- rbinom(n=1, size=1, prob=p)
eachCount[ele]<-eachCount[ele]+countEach
print(tr)
}
}
orderList<-sample.int(totalN, totalN, replace = TRUE)
trials<-10000
eachCount<-rep(0, totalN)
for (tr in seq(1,trials))
{
for(ele in orderList)
{
countEach<-0
p<-1-pexp(2, rate=ele)
countEach <- rbinom(n=1, size=1, prob=p)
eachCount[ele]<-eachCount[ele]+countEach
print(tr)
}
}
orderList<-sample.int(totalN, totalN, replace = TRUE)
trials<-10000
eachCount<-rep(0, totalN)
for (tr in seq(1,trials))
{
for(ele in orderList)
{
countEach<-0
p<-1-pexp(2, rate=ele)
countEach <- rbinom(n=1, size=1, prob=p)
eachCount[ele]<-eachCount[ele]+countEach
}
}
eachCount
trials<-100000
eachCount<-rep(0, totalN)
for (tr in seq(1,trials))
{
for(ele in orderList)
{
countEach<-0
p<-1-pexp(2, rate=ele)
countEach <- rbinom(n=1, size=1, prob=p)
eachCount[ele]<-eachCount[ele]+countEach
}
}
eachCount
eachCountorderList
orderList
orderList
#N: 1~10
par("mar")
par(mfrow = c(2, 2))
totalN<-10
den<-0
totalP<-0
pLi<-c()
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
den<-den+p*1/totalN
}
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
each<-(p*1/totalN)/den
pLi <- c(pLi, each)
totalP<-totalP+each
print(each)
print(totalP)
}
barplot(pLi)
orderList<-sample.int(totalN, totalN, replace = TRUE)
trials<-100000
eachCount<-rep(0, totalN)
for (tr in seq(1,trials))
{
for(ele in orderList)
{
countEach<-0
p<-1-pexp(2, rate=ele)
countEach <- rbinom(n=1, size=1, prob=p)
eachCount[ele]<-eachCount[ele]+countEach
}
}
eachCount
eachCount<-eachCount/trials
eachCount
barplot(eachCount)
sum(eachCount)
orderList
orderList<-sample.int(totalN, totalN, replace = FALSE)
trials<-100000
eachCount<-rep(0, totalN)
for (tr in seq(1,trials))
{
for(ele in orderList)
{
countEach<-0
p<-1-pexp(2, rate=ele)
countEach <- rbinom(n=1, size=1, prob=p)
eachCount[ele]<-eachCount[ele]+countEach
}
}
eachCount<-eachCount/trials
sum(eachCount)
orderList
barplot(orderList)
#N: 1~10
par("mar")
par(mfrow = c(2, 2))
totalN<-10
den<-0
totalP<-0
pLi<-c()
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
den<-den+p*1/totalN
}
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
each<-(p*1/totalN)/den
pLi <- c(pLi, each)
totalP<-totalP+each
print(each)
print(totalP)
}
#N: 1~10
par("mar")
par(mfrow = c(2, 2))
totalN<-10
den<-0
totalP<-0
pLi<-c()
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
den<-den+p*1/totalN
}
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
each<-(p*1/totalN)/den
pLi <- c(pLi, each)
totalP<-totalP+each
print(each)
print(totalP)
}
barplot(pLi)
barplot
trials<-100000
eachCount<-rep(0, totalN)
for (tr in seq(1,trials))
{
orderList<-sample.int(totalN, totalN, replace = TRUE)
for(ele in orderList)
{
countEach<-0
p<-1-pexp(2, rate=ele)
countEach <- rbinom(n=1, size=1, prob=p)
eachCount[ele]<-eachCount[ele]+countEach
}
}
eachCount<-eachCount/trials
eachCount
barplot(eachCount)
pLi
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
den<-den+p*1/totalN
}
p
den
trials<-100000
eachCount<-rep(0, totalN)
for (tr in seq(1,trials))
{
orderList<-sample.int(totalN, totalN, replace = FALSE)
for(ele in orderList)
{
countEach<-0
p<-1-pexp(2, rate=ele)
countEach <- rbinom(n=1, size=1, prob=p)
eachCount[ele]<-eachCount[ele]+countEach
}
}
eachCount<-eachCount/trials
barplot(eachCount)
trials<-100000
eachCount<-rep(0, totalN)
for (tr in seq(1,trials))
{
orderList<-sample.int(totalN, totalN, replace = TRUE)
for(ele in orderList)
{
countEach<-0
p<-1-pexp(2, rate=ele)
countEach <- rbinom(n=1, size=1, prob=p)
eachCount[ele]<-eachCount[ele]+countEach
}
}
eachCount<-eachCount/trials
barplot(eachCount)
eachCount
pLi
pLi[1]/eachCount[1]
eachCount
eachCount/sum(eachCount)
barplot(test)
test<-eachCount/sum(eachCount)
barplot(test)
#N: 1~10
par("mar")
par(mfrow = c(2, 2))
totalN<-10
den<-0
totalP<-0
pLi<-c()
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
den<-den+p*1/totalN
}
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
each<-(p*1/totalN)/den
pLi <- c(pLi, each)
totalP<-totalP+each
# print(each)
# print(totalP)
}
barplot(pLi)
barplot(pLi)
test<-eachCount/sum(eachCount)
barplot(test)
#N: 1~10
par("mar")
par(mfrow = c(2, 2))
totalN<-10
den<-0
totalP<-0
pLi<-c()
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
den<-den+p*1/totalN
}
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
each<-(p*1/totalN)/den
pLi <- c(pLi, each)
totalP<-totalP+each
# print(each)
# print(totalP)
}
barplot(pLi)
trials<-300000
eachCount<-rep(0, totalN)
for (tr in seq(1,trials))
{
orderList<-sample.int(totalN, totalN, replace = TRUE)
for(ele in orderList)
{
countEach<-0
p<-1-pexp(2, rate=ele)
countEach <- rbinom(n=1, size=1, prob=p)
eachCount[ele]<-eachCount[ele]+countEach
}
}
eachCount<-eachCount/sum(eachCount)
barplot(eachCount)
barplot(eachCount)
#N: 1~10
par("mar")
par(mfrow = c(2, 2))
totalN<-10
den<-0
totalP<-0
pLi<-c()
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
den<-den+p*1/totalN
}
for (N in seq(1, totalN))
{
p<-1-pexp(2, rate=N)
each<-(p*1/totalN)/den
pLi <- c(pLi, each)
totalP<-totalP+each
# print(each)
# print(totalP)
}
barplot(pLi)
trials<-300000
eachCount<-rep(0, totalN)
for (tr in seq(1,trials))
{
orderList<-sample.int(totalN, totalN, replace = TRUE)
for(ele in orderList)
{
countEach<-0
p<-1-pexp(2, rate=ele)
countEach <- rbinom(n=1, size=1, prob=p)
eachCount[ele]<-eachCount[ele]+countEach
}
}
# eachCount<-eachCount/trials
eachCount<-eachCount/sum(eachCount)
barplot(eachCount)
pnorm(84, mean=-1, sd=-3^(1/2), lower.tail=FALSE)
pnorm(0, mean=-1, sd=-3^(1/2), lower.tail=FALSE)
pnorm(0, mean=-1, sd=-3^(1/2), lower.tail=FALSE)
pnorm(0, mean=-1, sd=3^(1/2), lower.tail=FALSE)
p<-pnorm(-1, mean=-1, sd=3^(1/2), lower.tail=FALSE)
p
pDe<-pnorm(0, mean=0, sd=1, lower.tail=FALSE)
p/pDe
p<-pnorm(0, mean=-1, sd=3^(1/2), lower.tail=FALSE)
pDe<-pnorm(0, mean=0, sd=1, lower.tail=FALSE)
p/pDe
p<-pnorm(0, mean=-1, sd=3^(1/2), lower.tail=FALSE)
pDe<-pnorm(-3, mean=0, sd=1, lower.tail=FALSE)
p/pDe
p<-pnorm(0, mean=-1, sd=3^(1/2), lower.tail=FALSE)
pDe<-pnorm(-3, mean=-1, sd=3^(1/2), lower.tail=FALSE)
p/pDe
p
pDe
eachCount<-rep(0, 2)
eachCount
trials<-10000
eachCount<-rep(0, 2)
eachCount
countEach <- rbinom(n=1, size=1, prob=UUze)
UUze<-p
UUMthr<-pDe
countEach <- rbinom(n=1, size=1, prob=UUze)
countEach
countEach <- rbinom(n=1, size=1, prob=UUMthr)
countEach
UUze
UUMthr
countEach <- rbinom(n=1, size=1, prob=UUze)
eachCount[1]<-eachCount[1]+countEach
countEach <- rbinom(n=1, size=1, prob=UUMthr)
eachCount[2]<-eachCount[2]+countEach
eachCount\
eachCount
p<-pnorm(0, mean=-1, sd=3^(1/2), lower.tail=FALSE)
pDe<-pnorm(-3, mean=-1, sd=3^(1/2), lower.tail=FALSE)
UUze<-p
UUMthr<-pDe
p/pDe
trials<-10000
eachCount<-rep(0, 2)
for (tr in seq(1,trials))
{
countEach <- rbinom(n=1, size=1, prob=UUze)
eachCount[1]<-eachCount[1]+countEach
countEach <- rbinom(n=1, size=1, prob=UUMthr)
eachCount[2]<-eachCount[2]+countEach
}
eachCount
eachCount[1]/eachCount[2]
library(sp)
library(rworldmap)
# The single argument to this function, points, is a data.frame in which:
#   - column 1 contains the longitude in degrees
#   - column 2 contains the latitude in degrees
coords2continent = function(points)
{
countriesSP <- getMap(resolution='low')
#countriesSP <- getMap(resolution='high') #you could use high res map from rworldxtra if you were concerned about detail
# converting points to a SpatialPoints object
# setting CRS directly to that from rworldmap
pointsSP = SpatialPoints(points, proj4string=CRS(proj4string(countriesSP)))
# use 'over' to get indices of the Polygons object containing each point
indices = over(pointsSP, countriesSP)
#indices$continent   # returns the continent (6 continent model)
indices$REGION   # returns the continent (7 continent model)
#indices$ADMIN  #returns country name
#indices$ISO3 # returns the ISO3 code
}
points = data.frame(lon=c(0, 90, -45, -100, 130), lat=c(52, 40, -10, 45, -30 ))
coords2continent(points)
points
MyData <- read.csv(file="Dyadic_COW_4.0.csv", header=TRUE, sep=",")
MyData <- read.csv(file="/Dyadic_COW_4.0.csv", header=TRUE, sep=",")
MyData <- read.csv(file="/MIDLOCA_2.0.csv", header=TRUE, sep=",")
MyData <- read.csv(file="MIDLOCA_2.0.csv", header=TRUE, sep=",")
MyData <- read.csv(file="MIDLOCA_2.0.csv", header=TRUE, sep=",")
getwd()
setwd("C:/Users/User/Documents/File/Coursework & Research/USC/5.USC(Fall 2018)/INF 554 Information Visualization/HW/Development(Project)")
MyData <- read.csv(file="MIDLOCA_2.0.csv", header=TRUE, sep=",")
MyData
MyData['year']
t=c(0, 90, -45, -100, 130)
type(t)
t
t=c(MyData['midloc2_xlongitude'])
t
lons=c(MyData['midloc2_xlongitude'])
lats=c(MyData['midloc2_ylatitude'])
points=data.frame(lon=lons,lat=lats)
decisionContinent=coords2continent(points)
points
points[0]
points[0,:]
points[1,:]
points[1,1]
points[1,2]
length(points)
nrow(points)
ncol(points)
points[1,]
points[0,]
i=1
decisionContinent=coords2continent(points[i,])
decisionContinent
points[i,]
points[i,]
points
pointsTest = data.frame(lon=c(0, 90, -45, -100, 130), lat=c(52, 40, -10, 45, -30 ))
pointsTest = data.frame(lon=c(0, 90, -45, -100, 130), lat=c(52, 40, -10, 45, -30 ))
pointsTest[1,]
coords2continent(pointsTest[1,])
decisionContinent=coords2continent(points[i,])
decisionContinent
points[i,1]
points[190,1]
points[189,1]
points[189,1]==NA
points[189,1]is.na(points[i,1])
is.na(points[i,1])
is.na(points[i,1])
is.na(points[189,1])
is.na(points[189,1])==FALSE
is.na(points[i,1])==FALSE
decisionContinent
decisionContinent[0]
typeof(decisionContinent)
typeof(decisionContinent)
decisionContinent
MyData <- read.csv(file="MIDLOCA_2.0.csv", header=TRUE, sep=",")
lons=c(MyData['midloc2_xlongitude'])
lats=c(MyData['midloc2_ylatitude'])
points=data.frame(lon=lons,lat=lats)
allContiInfor=c()
for (i in 1:nrow(points)){
if (is.na(points[i,1])==FALSE)
{
decisionContinent=coords2continent(points[i,])
allContiInfor=c(allContiInfor,decisionContinent)
}
if (is.na(points[i,1])==TRUE)
{
allContiInfor=c(allContiInfor,0)
}
}
allContiInfor
length(allContiInfor)
nrow(points)
typeof(MyData)
testData<-MyData
unit(testData,allContiInfor)
unite(testData,allContiInfor)
library(dplyr)
unit(testData,allContiInfor)
merge(testData, unique(allContiInfor))
testData['y']
merged<-merge(testData, unique(allContiInfor))
merged
unique(allContiInfor)
allContiInfor
typeof(allContiInfor)
allContiInfor[1]
decisionContinent
length(allContiInfor)
allContiInfor[2292]
allContiInfor[1]
colnames(allContiInfor)<-c('continent')
colname(allContiInfor)<-c('continent')
colname(allContiInfor)<-c(continent)
merged<-merge(testData, allContiInfor)
merged
